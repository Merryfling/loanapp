// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: loanapp.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoanAppService_Register_FullMethodName           = "/loanapp.LoanAppService/Register"
	LoanAppService_Login_FullMethodName              = "/loanapp.LoanAppService/Login"
	LoanAppService_GetUserProfile_FullMethodName     = "/loanapp.LoanAppService/GetUserProfile"
	LoanAppService_UpdateUserProfile_FullMethodName  = "/loanapp.LoanAppService/UpdateUserProfile"
	LoanAppService_ApplyLoan_FullMethodName          = "/loanapp.LoanAppService/ApplyLoan"
	LoanAppService_ApplicationStatus_FullMethodName  = "/loanapp.LoanAppService/ApplicationStatus"
	LoanAppService_ApplicationHistory_FullMethodName = "/loanapp.LoanAppService/ApplicationHistory"
)

// LoanAppServiceClient is the client API for LoanAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义服务接口
type LoanAppServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	ApplyLoan(ctx context.Context, in *ApplicationRequest, opts ...grpc.CallOption) (*ApplicationResponse, error)
	ApplicationStatus(ctx context.Context, in *ApplicationStatusRequest, opts ...grpc.CallOption) (*ApplicationStatusResponse, error)
	ApplicationHistory(ctx context.Context, in *ApplicationHistoryRequest, opts ...grpc.CallOption) (*ApplicationHistoryResponse, error)
}

type loanAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanAppServiceClient(cc grpc.ClientConnInterface) LoanAppServiceClient {
	return &loanAppServiceClient{cc}
}

func (c *loanAppServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, LoanAppService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAppServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, LoanAppService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAppServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, LoanAppService_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAppServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, LoanAppService_UpdateUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAppServiceClient) ApplyLoan(ctx context.Context, in *ApplicationRequest, opts ...grpc.CallOption) (*ApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplicationResponse)
	err := c.cc.Invoke(ctx, LoanAppService_ApplyLoan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAppServiceClient) ApplicationStatus(ctx context.Context, in *ApplicationStatusRequest, opts ...grpc.CallOption) (*ApplicationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplicationStatusResponse)
	err := c.cc.Invoke(ctx, LoanAppService_ApplicationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAppServiceClient) ApplicationHistory(ctx context.Context, in *ApplicationHistoryRequest, opts ...grpc.CallOption) (*ApplicationHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplicationHistoryResponse)
	err := c.cc.Invoke(ctx, LoanAppService_ApplicationHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanAppServiceServer is the server API for LoanAppService service.
// All implementations must embed UnimplementedLoanAppServiceServer
// for forward compatibility.
//
// 定义服务接口
type LoanAppServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	ApplyLoan(context.Context, *ApplicationRequest) (*ApplicationResponse, error)
	ApplicationStatus(context.Context, *ApplicationStatusRequest) (*ApplicationStatusResponse, error)
	ApplicationHistory(context.Context, *ApplicationHistoryRequest) (*ApplicationHistoryResponse, error)
	mustEmbedUnimplementedLoanAppServiceServer()
}

// UnimplementedLoanAppServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoanAppServiceServer struct{}

func (UnimplementedLoanAppServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedLoanAppServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedLoanAppServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedLoanAppServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedLoanAppServiceServer) ApplyLoan(context.Context, *ApplicationRequest) (*ApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyLoan not implemented")
}
func (UnimplementedLoanAppServiceServer) ApplicationStatus(context.Context, *ApplicationStatusRequest) (*ApplicationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationStatus not implemented")
}
func (UnimplementedLoanAppServiceServer) ApplicationHistory(context.Context, *ApplicationHistoryRequest) (*ApplicationHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationHistory not implemented")
}
func (UnimplementedLoanAppServiceServer) mustEmbedUnimplementedLoanAppServiceServer() {}
func (UnimplementedLoanAppServiceServer) testEmbeddedByValue()                        {}

// UnsafeLoanAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanAppServiceServer will
// result in compilation errors.
type UnsafeLoanAppServiceServer interface {
	mustEmbedUnimplementedLoanAppServiceServer()
}

func RegisterLoanAppServiceServer(s grpc.ServiceRegistrar, srv LoanAppServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoanAppServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoanAppService_ServiceDesc, srv)
}

func _LoanAppService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAppServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAppService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAppServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAppService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAppServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAppService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAppServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAppService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAppServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAppService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAppServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAppService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAppServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAppService_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAppServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAppService_ApplyLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAppServiceServer).ApplyLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAppService_ApplyLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAppServiceServer).ApplyLoan(ctx, req.(*ApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAppService_ApplicationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAppServiceServer).ApplicationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAppService_ApplicationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAppServiceServer).ApplicationStatus(ctx, req.(*ApplicationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAppService_ApplicationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAppServiceServer).ApplicationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAppService_ApplicationHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAppServiceServer).ApplicationHistory(ctx, req.(*ApplicationHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoanAppService_ServiceDesc is the grpc.ServiceDesc for LoanAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoanAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loanapp.LoanAppService",
	HandlerType: (*LoanAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _LoanAppService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _LoanAppService_Login_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _LoanAppService_GetUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _LoanAppService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "ApplyLoan",
			Handler:    _LoanAppService_ApplyLoan_Handler,
		},
		{
			MethodName: "ApplicationStatus",
			Handler:    _LoanAppService_ApplicationStatus_Handler,
		},
		{
			MethodName: "ApplicationHistory",
			Handler:    _LoanAppService_ApplicationHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loanapp.proto",
}
